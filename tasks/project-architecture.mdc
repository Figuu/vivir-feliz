---
alwaysApply: true
---

# Arquitectura del Proyecto - Vivir Feliz

## Descripción General

Este es un sistema de gestión integral para un centro de terapias infantiles desarrollado con Next.js 15, que incluye funcionalidades para administradores, terapeutas, padres y super administradores. El sistema maneja citas, propuestas de tratamiento, evaluaciones médicas, reportes de progreso y gestión de documentos.

### Características de Localización y UI

- **Frontend Completamente en Español**: Todas las vistas, textos, diálogos, mensajes de error, validaciones y contenido visible al usuario debe estar completamente en español
- **Código en Inglés**: Todo el código de la aplicación (variables, funciones, comentarios, nombres de archivos, rutas de API) debe estar en inglés
- **Mobile Responsive**: La aplicación debe ser completamente responsive y optimizada para dispositivos móviles, tablets y desktop
- **Accesibilidad**: Cumple con estándares de accesibilidad web (WCAG) para usuarios con discapacidades

## Stack Tecnológico

### Frontend

- **Framework**: Next.js 15.1.7 con App Router
- **UI Framework**: React 19.0.0
- **Styling**: TailwindCSS 3.4.17
- **Componentes UI**: shadcn/ui con Radix UI primitives
- **Iconos**: Lucide React
- **Formularios**: react-hook-form 7.54.2 + zod 3.24.2 para validación
- **Estado del Servidor**: Tanstack React Query 5.66.7
- **Animaciones**: Framer Motion 12.4.7
- **Temas**: next-themes para modo oscuro/claro

### Backend

- **API**: Next.js API Routes (RESTful)
- **Autenticación**: Supabase Auth + NextAuth
- **Base de Datos**: PostgreSQL con Prisma 6.4.0 como ORM
- **Almacenamiento**: Supabase Storage para archivos
- **Email**: Resend para emails transaccionales
- **Seguridad**: Crypto-js para encriptación

### Herramientas de Desarrollo

- **Lenguaje**: TypeScript 5.7.3
- **Linting**: ESLint 9.20.1
- **Formateo**: Prettier 3.5.1
- **Gestión de Paquetes**: pnpm (preferido sobre npm)
- **Base de Datos**: Prisma Studio para administración

## Estructura del Proyecto

```
src/
├── app/                          # Next.js App Router
│   ├── (auth)/                   # Rutas de autenticación (grupo de rutas)
│   │   ├── sign-in/              # Página de inicio de sesión
│   │   ├── forgot-password/      # Recuperación de contraseña
│   │   ├── reset-password/       # Reset de contraseña
│   ├── (dashboard)/              # Rutas protegidas del dashboard
│   │   ├── admin/                # Panel de administrador
│   │   ├── therapist/            # Panel de terapeuta
│   │   ├── parent/               # Panel de padre/madre
│   │   ├── super-admin/          # Panel de super administrador
│   │   ├── settings/             # Configuraciones del usuario
│   │   └── dashboard/            # Dashboard principal
│   ├── api/                      # API Routes organizadas por dominio
│   │   ├── admin/                # Endpoints para administradores
│   │   ├── therapist/            # Endpoints para terapeutas
│   │   ├── parent/               # Endpoints para padres
│   │   ├── auth/                 # Endpoints de autenticación
│   │   ├── profile/              # Gestión de perfiles
│   │   ├── schedule/             # Gestión de horarios
│   │   └── specialties/          # Gestión de especialidades
│   ├── schedule/                 # Páginas públicas de agendamiento
│   └── verify-email/             # Verificación de email
├── components/                   # Componentes React organizados por dominio
│   ├── ui/                       # Componentes base de shadcn/ui
│   ├── auth/                     # Componentes de autenticación
│   ├── admin/                    # Componentes específicos de admin
│   ├── therapist/                # Componentes específicos de terapeuta
│   ├── parent/                   # Componentes específicos de padre
│   ├── dashboard/                # Componentes del dashboard
│   ├── sidebar/                  # Componentes de navegación
│   ├── magicui/                  # Componentes de animación personalizados
│   └── views/                    # Vistas complejas
├── hooks/                        # Custom React hooks para lógica compartida
│   ├── use-current-user.ts       # Hook para usuario actual
│   ├── use-auth.ts               # Hook de autenticación
│   ├── use-admin-*.ts            # Hooks específicos de admin
│   ├── use-therapist-*.ts        # Hooks específicos de terapeuta
│   └── use-parent-*.ts           # Hooks específicos de padre
├── lib/                          # Utilidades y configuración
│   ├── auth/                     # Configuración de autenticación
│   ├── supabase/                 # Configuración de Supabase
│   ├── providers/                # Providers de React Query
│   ├── validations/              # Esquemas de validación Zod
│   ├── prisma.ts                 # Cliente de Prisma
│   ├── utils.ts                  # Utilidades generales
│   └── date-utils.ts             # Utilidades de fechas
├── providers/                    # Context providers globales
│   └── auth-provider.tsx         # Provider de autenticación
├── context/                      # Contextos de React
│   ├── theme-context.tsx         # Contexto de temas
│   └── search-context.tsx        # Contexto de búsqueda
├── types/                        # Definiciones de tipos TypeScript
│   ├── auth/                     # Tipos de autenticación
│   ├── profile.ts                # Tipos de perfil
│   ├── patients.ts               # Tipos de pacientes
│   └── reports.ts                # Tipos de reportes
└── middleware.ts                 # Middleware de Next.js para autenticación
```

## Patrones de Arquitectura

### 1. Flujo Full-Stack

El proyecto sigue un flujo estructurado de capas:

1. **Páginas** (`/src/app`) - Puntos de entrada definidos con Next.js App Router
2. **Componentes** (`/src/components`) - Lógica de presentación y interacción
3. **Hooks** (`/src/hooks`) - Lógica de obtención de datos usando React Query
4. **API Routes** (`/src/app/api`) - Lógica del servidor y operaciones de base de datos
5. **Base de Datos** - Todas las operaciones usan Prisma ORM

### 2. Gestión de Estado

- **Estado del Servidor**: React Query para caché, loading states y error handling
- **Estado Global**: Context API para autenticación y temas
- **Estado Local**: useState/useReducer para estado de componentes

### 3. Autenticación y Autorización

- **Autenticación**: Supabase Auth con middleware personalizado
- **Autorización**: Sistema de roles (SUPER_ADMIN, ADMIN, THERAPIST, PARENT)
- **Protección de Rutas**: Middleware que verifica sesión y roles
- **Redirección Automática**: Basada en el rol del usuario

### 4. Base de Datos

- **ORM**: Prisma con PostgreSQL
- **Migraciones**: Sistema de migraciones versionado
- **Relaciones**: Modelos bien definidos con relaciones complejas
- **Índices**: Optimización de consultas con índices estratégicos

## Modelos de Base de Datos Principales

### Profile (Usuarios)

- Información básica del usuario
- Roles y permisos
- Especialidades (para terapeutas)
- Configuración de horarios

### Patient (Pacientes)

- Información médica y personal
- Relación con padres/tutores
- Historial de citas y tratamientos

### Appointment (Citas)

- Sistema de agendamiento
- Tipos de citas (consulta, entrevista, seguimiento, terapia)
- Estados y seguimiento

### TreatmentProposal (Propuestas de Tratamiento)

- Propuestas duales (A y B)
- Planes de pago flexibles
- Servicios incluidos
- Seguimiento de aprobación

### MedicalForm (Formularios Médicos)

- Evaluación integral del desarrollo
- Historial médico detallado
- Información familiar y social

### Analysis (Análisis)

- Evaluación psicológica
- Observaciones clínicas
- Recomendaciones de tratamiento

## Patrones de Componentes

### 1. Componentes UI Base

- shadcn/ui como sistema de diseño
- Componentes accesibles con Radix UI
- Theming consistente con CSS variables
- Completamente responsive para todos los dispositivos
- Textos y labels en español

### 2. Componentes de Dominio

- Organizados por funcionalidad (admin, therapist, parent)
- Reutilización de lógica con custom hooks
- Separación clara de responsabilidades
- Todos los textos y labels en español
- Mensajes de error y validación en español

### 3. Formularios

- react-hook-form para manejo de estado
- zod para validación de esquemas
- Validación tanto en cliente como servidor
- Mensajes de error y validación en español
- Labels y placeholders en español

## Configuración de Seguridad

### Headers de Seguridad

- Content Security Policy (CSP)
- X-Frame-Options
- X-Content-Type-Options
- Strict-Transport-Security

### Autenticación

- JWT tokens con Supabase
- Middleware de verificación de sesión
- Protección de rutas por roles

### Validación

- Validación de entrada en API routes
- Sanitización de datos
- Protección contra inyección SQL (Prisma)

## Configuración de Desarrollo

### Scripts Principales

```bash
pnpm dev          # Desarrollo con Turbopack
pnpm build        # Build de producción
pnpm start        # Servidor de producción
pnpm lint         # Linting con ESLint
```

### Variables de Entorno Requeridas

```env
# Supabase
NEXT_PUBLIC_SUPABASE_URL=
NEXT_PUBLIC_SUPABASE_ANON_KEY=
DATABASE_URL=
DIRECT_URL=

# Storage
NEXT_PUBLIC_SUPABASE_STORAGE_BUCKET=

# Email (opcional)
RESEND_API_KEY=
```

## Características Especiales

### 1. Sistema de Roles Complejo

- 4 roles diferentes con permisos específicos
- Middleware de autorización automático
- Dashboards personalizados por rol
- Interfaz completamente en español para todos los roles
- Navegación responsive adaptada a cada rol

### 2. Sistema de Agendamiento Avanzado

- Horarios configurables por terapeuta
- Slots de tiempo dinámicos
- Gestión de ausencias y reprogramaciones
- Interfaz de agendamiento completamente en español
- Calendario responsive optimizado para móviles

### 3. Sistema de Reportes

- Reportes de progreso
- Evaluaciones de desarrollo
- Generación de PDFs
- Contribuciones multi-terapeuta
- Formularios de reportes en español
- PDFs generados con contenido en español

### 4. Gestión de Documentos

- Subida de archivos a Supabase Storage
- Categorización de documentos
- Control de acceso por rol
- Interfaz de gestión de documentos en español
- Upload responsive optimizado para móviles

### 5. Sistema de Pagos

- Múltiples métodos de pago
- Planes de pago flexibles
- Seguimiento de pagos
- Interfaz de pagos en español
- Formularios de pago responsive

## Consideraciones de Rendimiento

### 1. Optimización de Consultas

- Índices de base de datos estratégicos
- Paginación en listas grandes
- Caché con React Query

### 2. Optimización de Imágenes

- Next.js Image component
- Dominios permitidos en next.config.js
- Optimización automática

### 3. Bundle Optimization

- Code splitting automático
- Lazy loading de componentes
- Tree shaking

### 4. Mobile Responsiveness

- **Diseño Mobile-First**: Desarrollo comenzando por dispositivos móviles
- **Breakpoints Responsivos**: Uso de TailwindCSS breakpoints (sm, md, lg, xl, 2xl)
- **Componentes Adaptativos**: Todos los componentes se adaptan a diferentes tamaños de pantalla
- **Navegación Móvil**: Sidebar colapsable y navegación optimizada para touch
- **Formularios Móviles**: Inputs y botones optimizados para dispositivos táctiles
- **Tablas Responsivas**: Tablas con scroll horizontal en móviles
- **Modales Móviles**: Diálogos y modales adaptados para pantallas pequeñas

## Deployment y Producción

### 1. Build Configuration

- Optimizaciones de producción
- Minificación de código
- Compresión de assets

### 2. Environment Setup

- Variables de entorno por ambiente
- Configuración de base de datos de producción
- Configuración de Supabase para producción

### 3. Monitoring

- Logs estructurados
- Error tracking
- Performance monitoring

## Extensibilidad

### 1. Nuevas Funcionalidades

- Estructura modular para agregar features
- Hooks reutilizables para lógica común
- Componentes base extensibles

### 2. Integraciones

- API RESTful para integraciones externas
- Webhooks para notificaciones
- Sistema de plugins preparado

### 3. Escalabilidad

- Arquitectura preparada para microservicios
- Base de datos optimizada para crecimiento
- Caché distribuido con React Query

Esta arquitectura proporciona una base sólida, escalable y mantenible para un sistema complejo de gestión de centro de terapias infantiles, con separación clara de responsabilidades y patrones consistentes en toda la aplicación.
# Arquitectura del Proyecto - Vivir Feliz

## Descripción General

Este es un sistema de gestión integral para un centro de terapias infantiles desarrollado con Next.js 15, que incluye funcionalidades para administradores, terapeutas, padres y super administradores. El sistema maneja citas, propuestas de tratamiento, evaluaciones médicas, reportes de progreso y gestión de documentos.

### Características de Localización y UI

- **Frontend Completamente en Español**: Todas las vistas, textos, diálogos, mensajes de error, validaciones y contenido visible al usuario debe estar completamente en español
- **Código en Inglés**: Todo el código de la aplicación (variables, funciones, comentarios, nombres de archivos, rutas de API) debe estar en inglés
- **Mobile Responsive**: La aplicación debe ser completamente responsive y optimizada para dispositivos móviles, tablets y desktop
- **Accesibilidad**: Cumple con estándares de accesibilidad web (WCAG) para usuarios con discapacidades

## Stack Tecnológico

### Frontend

- **Framework**: Next.js 15.1.7 con App Router
- **UI Framework**: React 19.0.0
- **Styling**: TailwindCSS 3.4.17
- **Componentes UI**: shadcn/ui con Radix UI primitives
- **Iconos**: Lucide React
- **Formularios**: react-hook-form 7.54.2 + zod 3.24.2 para validación
- **Estado del Servidor**: Tanstack React Query 5.66.7
- **Animaciones**: Framer Motion 12.4.7
- **Temas**: next-themes para modo oscuro/claro

### Backend

- **API**: Next.js API Routes (RESTful)
- **Autenticación**: Supabase Auth + NextAuth
- **Base de Datos**: PostgreSQL con Prisma 6.4.0 como ORM
- **Almacenamiento**: Supabase Storage para archivos
- **Email**: Resend para emails transaccionales
- **Seguridad**: Crypto-js para encriptación

### Herramientas de Desarrollo

- **Lenguaje**: TypeScript 5.7.3
- **Linting**: ESLint 9.20.1
- **Formateo**: Prettier 3.5.1
- **Gestión de Paquetes**: pnpm (preferido sobre npm)
- **Base de Datos**: Prisma Studio para administración

## Estructura del Proyecto

```
src/
├── app/                          # Next.js App Router
│   ├── (auth)/                   # Rutas de autenticación (grupo de rutas)
│   │   ├── sign-in/              # Página de inicio de sesión
│   │   ├── forgot-password/      # Recuperación de contraseña
│   │   ├── reset-password/       # Reset de contraseña
│   ├── (dashboard)/              # Rutas protegidas del dashboard
│   │   ├── admin/                # Panel de administrador
│   │   ├── therapist/            # Panel de terapeuta
│   │   ├── parent/               # Panel de padre/madre
│   │   ├── super-admin/          # Panel de super administrador
│   │   ├── settings/             # Configuraciones del usuario
│   │   └── dashboard/            # Dashboard principal
│   ├── api/                      # API Routes organizadas por dominio
│   │   ├── admin/                # Endpoints para administradores
│   │   ├── therapist/            # Endpoints para terapeutas
│   │   ├── parent/               # Endpoints para padres
│   │   ├── auth/                 # Endpoints de autenticación
│   │   ├── profile/              # Gestión de perfiles
│   │   ├── schedule/             # Gestión de horarios
│   │   └── specialties/          # Gestión de especialidades
│   ├── schedule/                 # Páginas públicas de agendamiento
│   └── verify-email/             # Verificación de email
├── components/                   # Componentes React organizados por dominio
│   ├── ui/                       # Componentes base de shadcn/ui
│   ├── auth/                     # Componentes de autenticación
│   ├── admin/                    # Componentes específicos de admin
│   ├── therapist/                # Componentes específicos de terapeuta
│   ├── parent/                   # Componentes específicos de padre
│   ├── dashboard/                # Componentes del dashboard
│   ├── sidebar/                  # Componentes de navegación
│   ├── magicui/                  # Componentes de animación personalizados
│   └── views/                    # Vistas complejas
├── hooks/                        # Custom React hooks para lógica compartida
│   ├── use-current-user.ts       # Hook para usuario actual
│   ├── use-auth.ts               # Hook de autenticación
│   ├── use-admin-*.ts            # Hooks específicos de admin
│   ├── use-therapist-*.ts        # Hooks específicos de terapeuta
│   └── use-parent-*.ts           # Hooks específicos de padre
├── lib/                          # Utilidades y configuración
│   ├── auth/                     # Configuración de autenticación
│   ├── supabase/                 # Configuración de Supabase
│   ├── providers/                # Providers de React Query
│   ├── validations/              # Esquemas de validación Zod
│   ├── prisma.ts                 # Cliente de Prisma
│   ├── utils.ts                  # Utilidades generales
│   └── date-utils.ts             # Utilidades de fechas
├── providers/                    # Context providers globales
│   └── auth-provider.tsx         # Provider de autenticación
├── context/                      # Contextos de React
│   ├── theme-context.tsx         # Contexto de temas
│   └── search-context.tsx        # Contexto de búsqueda
├── types/                        # Definiciones de tipos TypeScript
│   ├── auth/                     # Tipos de autenticación
│   ├── profile.ts                # Tipos de perfil
│   ├── patients.ts               # Tipos de pacientes
│   └── reports.ts                # Tipos de reportes
└── middleware.ts                 # Middleware de Next.js para autenticación
```

## Patrones de Arquitectura

### 1. Flujo Full-Stack

El proyecto sigue un flujo estructurado de capas:

1. **Páginas** (`/src/app`) - Puntos de entrada definidos con Next.js App Router
2. **Componentes** (`/src/components`) - Lógica de presentación y interacción
3. **Hooks** (`/src/hooks`) - Lógica de obtención de datos usando React Query
4. **API Routes** (`/src/app/api`) - Lógica del servidor y operaciones de base de datos
5. **Base de Datos** - Todas las operaciones usan Prisma ORM

### 2. Gestión de Estado

- **Estado del Servidor**: React Query para caché, loading states y error handling
- **Estado Global**: Context API para autenticación y temas
- **Estado Local**: useState/useReducer para estado de componentes

### 3. Autenticación y Autorización

- **Autenticación**: Supabase Auth con middleware personalizado
- **Autorización**: Sistema de roles (SUPER_ADMIN, ADMIN, THERAPIST, PARENT)
- **Protección de Rutas**: Middleware que verifica sesión y roles
- **Redirección Automática**: Basada en el rol del usuario

### 4. Base de Datos

- **ORM**: Prisma con PostgreSQL
- **Migraciones**: Sistema de migraciones versionado
- **Relaciones**: Modelos bien definidos con relaciones complejas
- **Índices**: Optimización de consultas con índices estratégicos

## Modelos de Base de Datos Principales

### Profile (Usuarios)

- Información básica del usuario
- Roles y permisos
- Especialidades (para terapeutas)
- Configuración de horarios

### Patient (Pacientes)

- Información médica y personal
- Relación con padres/tutores
- Historial de citas y tratamientos

### Appointment (Citas)

- Sistema de agendamiento
- Tipos de citas (consulta, entrevista, seguimiento, terapia)
- Estados y seguimiento

### TreatmentProposal (Propuestas de Tratamiento)

- Propuestas duales (A y B)
- Planes de pago flexibles
- Servicios incluidos
- Seguimiento de aprobación

### MedicalForm (Formularios Médicos)

- Evaluación integral del desarrollo
- Historial médico detallado
- Información familiar y social

### Analysis (Análisis)

- Evaluación psicológica
- Observaciones clínicas
- Recomendaciones de tratamiento

## Patrones de Componentes

### 1. Componentes UI Base

- shadcn/ui como sistema de diseño
- Componentes accesibles con Radix UI
- Theming consistente con CSS variables
- Completamente responsive para todos los dispositivos
- Textos y labels en español

### 2. Componentes de Dominio

- Organizados por funcionalidad (admin, therapist, parent)
- Reutilización de lógica con custom hooks
- Separación clara de responsabilidades
- Todos los textos y labels en español
- Mensajes de error y validación en español

### 3. Formularios

- react-hook-form para manejo de estado
- zod para validación de esquemas
- Validación tanto en cliente como servidor
- Mensajes de error y validación en español
- Labels y placeholders en español

## Configuración de Seguridad

### Headers de Seguridad

- Content Security Policy (CSP)
- X-Frame-Options
- X-Content-Type-Options
- Strict-Transport-Security

### Autenticación

- JWT tokens con Supabase
- Middleware de verificación de sesión
- Protección de rutas por roles

### Validación

- Validación de entrada en API routes
- Sanitización de datos
- Protección contra inyección SQL (Prisma)

## Configuración de Desarrollo

### Scripts Principales

```bash
pnpm dev          # Desarrollo con Turbopack
pnpm build        # Build de producción
pnpm start        # Servidor de producción
pnpm lint         # Linting con ESLint
```

### Variables de Entorno Requeridas

```env
# Supabase
NEXT_PUBLIC_SUPABASE_URL=
NEXT_PUBLIC_SUPABASE_ANON_KEY=
DATABASE_URL=
DIRECT_URL=

# Storage
NEXT_PUBLIC_SUPABASE_STORAGE_BUCKET=

# Email (opcional)
RESEND_API_KEY=
```

## Características Especiales

### 1. Sistema de Roles Complejo

- 4 roles diferentes con permisos específicos
- Middleware de autorización automático
- Dashboards personalizados por rol
- Interfaz completamente en español para todos los roles
- Navegación responsive adaptada a cada rol

### 2. Sistema de Agendamiento Avanzado

- Horarios configurables por terapeuta
- Slots de tiempo dinámicos
- Gestión de ausencias y reprogramaciones
- Interfaz de agendamiento completamente en español
- Calendario responsive optimizado para móviles

### 3. Sistema de Reportes

- Reportes de progreso
- Evaluaciones de desarrollo
- Generación de PDFs
- Contribuciones multi-terapeuta
- Formularios de reportes en español
- PDFs generados con contenido en español

### 4. Gestión de Documentos

- Subida de archivos a Supabase Storage
- Categorización de documentos
- Control de acceso por rol
- Interfaz de gestión de documentos en español
- Upload responsive optimizado para móviles

### 5. Sistema de Pagos

- Múltiples métodos de pago
- Planes de pago flexibles
- Seguimiento de pagos
- Interfaz de pagos en español
- Formularios de pago responsive

## Consideraciones de Rendimiento

### 1. Optimización de Consultas

- Índices de base de datos estratégicos
- Paginación en listas grandes
- Caché con React Query

### 2. Optimización de Imágenes

- Next.js Image component
- Dominios permitidos en next.config.js
- Optimización automática

### 3. Bundle Optimization

- Code splitting automático
- Lazy loading de componentes
- Tree shaking

### 4. Mobile Responsiveness

- **Diseño Mobile-First**: Desarrollo comenzando por dispositivos móviles
- **Breakpoints Responsivos**: Uso de TailwindCSS breakpoints (sm, md, lg, xl, 2xl)
- **Componentes Adaptativos**: Todos los componentes se adaptan a diferentes tamaños de pantalla
- **Navegación Móvil**: Sidebar colapsable y navegación optimizada para touch
- **Formularios Móviles**: Inputs y botones optimizados para dispositivos táctiles
- **Tablas Responsivas**: Tablas con scroll horizontal en móviles
- **Modales Móviles**: Diálogos y modales adaptados para pantallas pequeñas

## Deployment y Producción

### 1. Build Configuration

- Optimizaciones de producción
- Minificación de código
- Compresión de assets

### 2. Environment Setup

- Variables de entorno por ambiente
- Configuración de base de datos de producción
- Configuración de Supabase para producción

### 3. Monitoring

- Logs estructurados
- Error tracking
- Performance monitoring

## Extensibilidad

### 1. Nuevas Funcionalidades

- Estructura modular para agregar features
- Hooks reutilizables para lógica común
- Componentes base extensibles

### 2. Integraciones

- API RESTful para integraciones externas
- Webhooks para notificaciones
- Sistema de plugins preparado

### 3. Escalabilidad

- Arquitectura preparada para microservicios
- Base de datos optimizada para crecimiento
- Caché distribuido con React Query

Esta arquitectura proporciona una base sólida, escalable y mantenible para un sistema complejo de gestión de centro de terapias infantiles, con separación clara de responsabilidades y patrones consistentes en toda la aplicación.
