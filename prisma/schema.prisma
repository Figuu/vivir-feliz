generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ========== MASTER PROFILE TABLE ==========
// This links to Supabase Auth user ID and contains shared fields

model Profile {
  id        String   @id // Supabase Auth user ID
  email     String   @unique
  firstName String
  lastName  String
  phone     String?
  avatar    String?
  role      UserRole
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Role-specific relations (one-to-one)
  therapist Therapist?
  parent    Parent?
  admin     Admin?

  // System relations
  sessions  Session[]
  auditLogs AuditLog[]

  @@index([role])
  @@index([isActive])
  @@index([email])
  @@map("profiles")
}

// ========== ROLE-SPECIFIC TABLES ==========
// These tables ONLY contain role-specific information

model Therapist {
  id                   String   @id @default(uuid())
  profileId            String   @unique
  profile              Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  licenseNumber        String?  @unique
  bio                  String?
  isCoordinator        Boolean  @default(false) // Coordinador = super therapist
  isActive             Boolean  @default(true)
  canTakeConsultations Boolean  @default(true)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  // Relations
  specialties           TherapistSpecialty[]
  certifications        TherapistCertification[]
  schedules             TherapistSchedule[]
  consultationRequests  ConsultationRequest[]
  consultationForms     ConsultationForm[]
  therapeuticProposals  TherapeuticProposal[]
  proposalServices      ProposalService[]   @relation("ProposalServiceTherapist")
  serviceAssignments    ServiceAssignment[]
  patientSessions       PatientSession[]
  therapeuticPlans      TherapeuticPlan[]
  progressReports       ProgressReport[]
  finalReports          FinalReport[]
  therapistMedicalForms TherapistMedicalForm[]

  @@index([profileId])
  @@index([isCoordinator])
  @@index([isActive])
  @@index([canTakeConsultations])
  @@index([licenseNumber])
  @@map("therapists")
}

model Parent {
  id               String   @id @default(uuid())
  profileId        String   @unique
  profile          Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  address          String?
  city             String?
  emergencyContact String?
  emergencyPhone   String?
  relationship     String? // padre, madre, tutor, etc.
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  patients              Patient[]
  consultationRequests  ConsultationRequest[]
  payments              Payment[]
  scheduleRequests      ScheduleRequest[]

  @@index([profileId])
  @@map("parents")
}

model Admin {
  id         String   @id @default(uuid())
  profileId  String   @unique
  profile    Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  department String? // Optional: which area they manage
  notes      String? // Optional: internal notes
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([profileId])
  @@map("admins")
}

// ========== USER ROLES ==========

enum UserRole {
  SUPER_ADMIN // Financial management, all user management
  ADMIN       // Secretary role, payment confirmation, schedule management
  COORDINATOR // Super therapist - manages therapists but IS a therapist
  THERAPIST   // Regular therapist
  PARENT      // Parent of patient

  @@map("user_roles")
}

// ========== REST OF SCHEMA (keeping your existing models) ==========

model Patient {
  id               String   @id @default(uuid())
  parentId         String
  parent           Parent   @relation(fields: [parentId], references: [id], onDelete: Cascade)
  firstName        String
  lastName         String
  dateOfBirth      DateTime
  gender           Gender
  schoolName       String?
  schoolGrade      String?
  medicalHistory   Json? // Structured medical history data
  specialNeeds     String? // Description of special needs
  emergencyContact String?
  emergencyPhone   String?
  isActive         Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  consultationRequests  ConsultationRequest[]
  medicalForms          MedicalForm[]
  therapeuticProposals  TherapeuticProposal[]
  patientSessions       PatientSession[]
  therapeuticPlans      TherapeuticPlan[]
  progressReports       ProgressReport[]
  finalReports          FinalReport[]
  documents             PatientDocument[]

  @@index([parentId])
  @@index([firstName, lastName])
  @@index([dateOfBirth])
  @@index([isActive])
  @@map("patients")
}

model Session {
  id        String   @id @default(uuid())
  profileId String
  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  token     String   @unique
  ipAddress String?
  userAgent String?
  device    String?
  browser   String?
  os        String?
  country   String?
  city      String?
  lastActivityAt DateTime @default(now())
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([profileId])
  @@index([token])
  @@index([expiresAt])
  @@map("sessions")
}

model AuditLog {
  id         String   @id @default(uuid())
  profileId  String?
  profile    Profile? @relation(fields: [profileId], references: [id], onDelete: SetNull)
  action     String
  resource   String
  resourceId String?
  oldValue   Json?
  newValue   Json?
  ipAddress  String?
  userAgent  String?
  success    Boolean  @default(true)
  errorMessage String?
  metadata   Json?
  category   String?
  createdAt  DateTime @default(now())

  @@index([profileId])
  @@index([action])
  @@index([resource])
  @@index([resourceId])
  @@index([createdAt])
  @@index([category])
  @@map("audit_logs")
}

// Continue with all your existing therapy-related models...
// (Specialty, ConsultationReason, Service, etc.)
// I'm keeping them as-is since they don't need changes

model Specialty {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  therapists         TherapistSpecialty[]
  services           Service[]
  consultationReasons ConsultationReason[]

  @@index([name])
  @@index([isActive])
  @@map("specialties")
}

model Certification {
  id                   String   @id @default(uuid())
  name                 String   @unique
  description          String
  issuingOrganization  String
  category             String
  expiryRequired       Boolean  @default(false)
  validityPeriod       Int? // in years
  requirements         String?
  website              String?
  color                String? // hex color code
  isActive             Boolean  @default(true)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  therapists TherapistCertification[]

  @@index([name])
  @@index([category])
  @@index([issuingOrganization])
  @@index([isActive])
  @@map("certifications")
}

model TherapistCertification {
  id               String        @id @default(uuid())
  therapistId      String
  therapist        Therapist     @relation(fields: [therapistId], references: [id], onDelete: Cascade)
  certificationId  String
  certification    Certification @relation(fields: [certificationId], references: [id], onDelete: Cascade)
  issueDate        DateTime
  expiryDate       DateTime?
  certificateNumber String?
  isVerified       Boolean       @default(false)
  notes            String?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  @@unique([therapistId, certificationId])
  @@index([therapistId])
  @@index([certificationId])
  @@index([expiryDate])
  @@map("therapist_certifications")
}

model ConsultationReason {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  specialtyId String
  specialty   Specialty @relation(fields: [specialtyId], references: [id], onDelete: Cascade)
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  consultationRequests ConsultationRequest[]

  @@index([specialtyId])
  @@index([name])
  @@index([isActive])
  @@map("consultation_reasons")
}

// ... (rest of your models remain the same)
// I'll add placeholders for the ones you need

model TherapistSpecialty {
  therapistId String
  therapist   Therapist @relation(fields: [therapistId], references: [id], onDelete: Cascade)
  specialtyId String
  specialty   Specialty @relation(fields: [specialtyId], references: [id], onDelete: Cascade)
  isPrimary   Boolean   @default(false)
  createdAt   DateTime  @default(now())

  @@id([therapistId, specialtyId])
  @@index([therapistId])
  @@index([specialtyId])
  @@map("therapist_specialties")
}

model TherapistSchedule {
  id                    String     @id @default(uuid())
  therapistId           String
  therapist             Therapist  @relation(fields: [therapistId], references: [id], onDelete: Cascade)
  dayOfWeek             DayOfWeek
  startTime             String // HH:mm format
  endTime               String // HH:mm format
  breakStart            String? // HH:mm format
  breakEnd              String? // HH:mm format
  breakBetweenSessions  Int       @default(15) // minutes
  isActive              Boolean   @default(true)
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@unique([therapistId, dayOfWeek])
  @@index([therapistId])
  @@index([dayOfWeek])
  @@index([isActive])
  @@map("therapist_schedules")
}

model Service {
  id              String      @id @default(uuid())
  code            String      @unique
  name            String
  description     String?
  type            ServiceType
  specialtyId     String
  specialty       Specialty   @relation(fields: [specialtyId], references: [id], onDelete: Cascade)
  defaultSessions Int
  costPerSession  Decimal     @db.Decimal(10, 2)
  sessionDuration Int // minutes
  isActive        Boolean     @default(true)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  proposalServices   ProposalService[]
  serviceAssignments ServiceAssignment[]

  @@index([code])
  @@index([specialtyId])
  @@index([type])
  @@index([isActive])
  @@map("services")
}

model ConsultationRequest {
  id             String                   @id @default(uuid())
  parentId       String
  parent         Parent                   @relation(fields: [parentId], references: [id], onDelete: Cascade)
  patientId      String
  patient        Patient                  @relation(fields: [patientId], references: [id], onDelete: Cascade)
  type           ConsultationType
  status         ConsultationStatus       @default(PENDING)
  scheduledDate  DateTime?
  scheduledTime  String? // HH:mm format
  duration       Int?                     // minutes
  therapistId    String?
  therapist      Therapist?               @relation(fields: [therapistId], references: [id], onDelete: SetNull)
  reasonId       String?
  reason         ConsultationReason?      @relation(fields: [reasonId], references: [id], onDelete: SetNull)
  cost           Decimal?                 @db.Decimal(10, 2)
  paymentStatus  PaymentStatus            @default(PENDING)
  paymentProof   String? // URL to uploaded file
  notes          String?
  createdAt      DateTime                 @default(now())
  updatedAt      DateTime                 @updatedAt

  consultationForm     ConsultationForm?
  therapeuticProposal  TherapeuticProposal?
  medicalForms         MedicalForm[]
  payments             Payment[]

  @@index([parentId])
  @@index([patientId])
  @@index([therapistId])
  @@index([status])
  @@index([scheduledDate])
  @@index([paymentStatus])
  @@map("consultation_requests")
}

// Add remaining models from your schema...
model ConsultationForm {
  id                   String              @id @default(uuid())
  consultationRequestId String             @unique
  consultationRequest  ConsultationRequest @relation(fields: [consultationRequestId], references: [id], onDelete: Cascade)
  therapistId          String
  therapist            Therapist           @relation(fields: [therapistId], references: [id], onDelete: Cascade)
  formData             Json // All form data
  diagnosis            String?
  observations         String?
  status               FormStatus          @default(DRAFT)
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt

  @@index([consultationRequestId])
  @@index([therapistId])
  @@index([status])
  @@map("consultation_forms")
}

model MedicalForm {
  id                    String               @id @default(uuid())
  patientId             String
  patient               Patient              @relation(fields: [patientId], references: [id], onDelete: Cascade)
  consultationRequestId String?
  consultationRequest   ConsultationRequest? @relation(fields: [consultationRequestId], references: [id], onDelete: SetNull)
  formData              Json                 // All medical form data
  filledBy              String               // "parent" or "therapist"
  isComplete            Boolean              @default(false)
  status                MedicalFormStatus    @default(DRAFT)
  currentStep           Int                  @default(1)
  completedSteps        Json                 @default("[]")
  completedAt           DateTime?
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt

  formProgress FormProgress[]

  @@index([patientId])
  @@index([consultationRequestId])
  @@index([isComplete])
  @@index([status])
  @@map("medical_forms")
}

model TherapeuticProposal {
  id                    String              @id @default(uuid())
  consultationRequestId String              @unique
  consultationRequest   ConsultationRequest @relation(fields: [consultationRequestId], references: [id], onDelete: Cascade)
  patientId             String
  patient               Patient             @relation(fields: [patientId], references: [id], onDelete: Cascade)
  therapistId           String
  therapist             Therapist           @relation(fields: [therapistId], references: [id], onDelete: Cascade)
  treatmentPeriod       TreatmentPeriod
  parentAvailability    Json // Availability schedule
  status                ProposalStatus      @default(DRAFT)
  notes                 String?             // Therapist notes
  coordinatorNotes      String?
  adminNotes            String?
  selectedProposal      ProposalType? // A or B
  paymentPlanType       PaymentPlanType?
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt

  services             ProposalService[]
  therapeuticPlan      TherapeuticPlan?

  @@index([consultationRequestId])
  @@index([patientId])
  @@index([therapistId])
  @@index([status])
  @@map("therapeutic_proposals")
}

model ProposalService {
  id                      String              @id @default(uuid())
  therapeuticProposalId   String
  therapeuticProposal     TherapeuticProposal @relation(fields: [therapeuticProposalId], references: [id], onDelete: Cascade)
  serviceId               String
  service                 Service             @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  therapistId             String
  therapist               Therapist           @relation("ProposalServiceTherapist", fields: [therapistId], references: [id], onDelete: Cascade)
  sessionsProposalA       Int
  sessionsProposalB       Int
  costPerSession          Decimal             @db.Decimal(10, 2)
  createdAt               DateTime            @default(now())
  updatedAt               DateTime            @updatedAt

  serviceAssignments ServiceAssignment[]

  @@index([therapeuticProposalId])
  @@index([serviceId])
  @@index([therapistId])
  @@map("proposal_services")
}

model ServiceAssignment {
  id                String          @id @default(uuid())
  proposalServiceId String
  proposalService   ProposalService @relation(fields: [proposalServiceId], references: [id], onDelete: Cascade)
  serviceId         String
  service           Service         @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  therapistId       String
  therapist         Therapist       @relation(fields: [therapistId], references: [id], onDelete: Cascade)
  numberOfSessions  Int
  status            AssignmentStatus @default(SCHEDULED)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  patientSessions PatientSession[]

  @@index([proposalServiceId])
  @@index([serviceId])
  @@index([therapistId])
  @@index([status])
  @@map("service_assignments")
}

model PatientSession {
  id                    String            @id @default(uuid())
  serviceAssignmentId   String
  serviceAssignment     ServiceAssignment @relation(fields: [serviceAssignmentId], references: [id], onDelete: Cascade)
  patientId             String
  patient               Patient           @relation(fields: [patientId], references: [id], onDelete: Cascade)
  therapistId           String
  therapist             Therapist         @relation(fields: [therapistId], references: [id], onDelete: Cascade)
  scheduledDate         DateTime
  scheduledTime         String // HH:mm format
  duration              Int // minutes
  status                SessionStatus     @default(SCHEDULED)
  startedAt             DateTime?
  completedAt           DateTime?
  therapistNotes        String?
  observations          String?
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt

  @@index([serviceAssignmentId])
  @@index([patientId])
  @@index([therapistId])
  @@index([scheduledDate])
  @@index([status])
  @@map("patient_sessions")
}

model TherapeuticPlan {
  id                      String              @id @default(uuid())
  therapeuticProposalId   String              @unique
  therapeuticProposal     TherapeuticProposal @relation(fields: [therapeuticProposalId], references: [id], onDelete: Cascade)
  patientId               String
  patient                 Patient             @relation(fields: [patientId], references: [id], onDelete: Cascade)
  therapistId             String
  therapist               Therapist           @relation(fields: [therapistId], references: [id], onDelete: Cascade)
  objectives              Json
  background              String?
  metrics                 Json
  recommendations         String?
  status                  ReportStatus        @default(DRAFT)
  coordinatorNotes        String?
  createdAt               DateTime            @default(now())
  updatedAt               DateTime            @updatedAt

  progressReports ProgressReport[]

  @@index([therapeuticProposalId])
  @@index([patientId])
  @@index([therapistId])
  @@index([status])
  @@map("therapeutic_plans")
}

model ProgressReport {
  id                String          @id @default(uuid())
  therapeuticPlanId String
  therapeuticPlan   TherapeuticPlan @relation(fields: [therapeuticPlanId], references: [id], onDelete: Cascade)
  patientId         String
  patient           Patient         @relation(fields: [patientId], references: [id], onDelete: Cascade)
  therapistId       String
  therapist         Therapist       @relation(fields: [therapistId], references: [id], onDelete: Cascade)
  reportNumber      Int // 1st, 2nd, 3rd report
  metricsUpdate     Json
  progress          String?
  observations      String?
  status            ReportStatus    @default(DRAFT)
  coordinatorNotes  String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  @@index([therapeuticPlanId])
  @@index([patientId])
  @@index([therapistId])
  @@index([status])
  @@map("progress_reports")
}

model FinalReport {
  id              String       @id @default(uuid())
  patientId       String
  patient         Patient      @relation(fields: [patientId], references: [id], onDelete: Cascade)
  therapistId     String
  therapist       Therapist    @relation(fields: [therapistId], references: [id], onDelete: Cascade)
  finalMetrics    Json
  conclusions     String?
  recommendations String?
  status          ReportStatus @default(DRAFT)
  coordinatorNotes String?
  coordinatorReport String? // Coordinator compiles all therapist reports
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  @@index([patientId])
  @@index([therapistId])
  @@index([status])
  @@map("final_reports")
}

model Payment {
  id                    String               @id @default(uuid())
  parentId              String
  parent                Parent               @relation(fields: [parentId], references: [id], onDelete: Cascade)
  consultationRequestId String?
  consultationRequest   ConsultationRequest? @relation(fields: [consultationRequestId], references: [id], onDelete: SetNull)
  paymentPlanId         String?
  paymentPlan           PaymentPlan?         @relation(fields: [paymentPlanId], references: [id], onDelete: SetNull)
  type                  PaymentType
  amount                Decimal              @db.Decimal(10, 2)
  status                PaymentStatus        @default(PENDING)
  paymentMethod         String?
  paymentProof          String?              // URL to uploaded file
  paymentDate           DateTime?
  dueDate               DateTime?
  confirmedBy           String?              // Admin who confirmed
  confirmedAt           DateTime?
  transactionId         String?
  currency              String               @default("USD")
  receiptUrl            String?
  refundAmount          Decimal?             @db.Decimal(10, 2)
  errorMessage          String?
  notes                 String?
  description           String?
  reference             String?
  processedAt           DateTime?
  metadata              Json?
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt

  receipts        PaymentReceipt[]
  statusHistory   PaymentStatusHistory[]
  timeouts        PaymentTimeout[]

  @@index([parentId])
  @@index([consultationRequestId])
  @@index([paymentPlanId])
  @@index([type])
  @@index([status])
  @@index([dueDate])
  @@index([transactionId])
  @@map("payments")
}

model PatientDocument {
  id          String   @id @default(uuid())
  patientId   String
  patient     Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)
  name        String
  type        String
  url         String
  uploadedBy  String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([patientId])
  @@map("patient_documents")
}

model ScheduleRequest {
  id                String              @id @default(uuid())
  parentId          String
  parent            Parent              @relation(fields: [parentId], references: [id], onDelete: Cascade)
  type              ScheduleRequestType
  reason            String
  newAvailability   Json?
  status            RequestStatus       @default(PENDING)
  adminResponse     String?
  respondedBy       String?
  respondedAt       DateTime?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  @@index([parentId])
  @@index([status])
  @@map("schedule_requests")
}

// ========== ENUMS ==========

enum Gender {
  MALE
  FEMALE
  OTHER

  @@map("genders")
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY

  @@map("days_of_week")
}

enum ServiceType {
  EVALUATION
  TREATMENT

  @@map("service_types")
}

enum ConsultationType {
  CONSULTATION // Paid
  INTERVIEW    // Free

  @@map("consultation_types")
}

enum ConsultationStatus {
  PENDING
  PAYMENT_PENDING
  PAYMENT_CONFIRMED
  CONFIRMED
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED

  @@map("consultation_statuses")
}

enum PaymentStatus {
  PENDING
  PROCESSING
  CONFIRMED
  COMPLETED
  REJECTED
  FAILED
  REFUNDED
  CANCELLED

  @@map("payment_statuses")
}

enum PaymentType {
  CONSULTATION
  PROPOSAL_FULL
  PROPOSAL_MONTHLY

  @@map("payment_types")
}

enum PaymentPlanType {
  FULL
  MONTHLY

  @@map("payment_plan_types")
}

enum FormStatus {
  DRAFT
  COMPLETED

  @@map("form_statuses")
}

enum ProposalStatus {
  DRAFT
  SUBMITTED_TO_COORDINATOR
  COORDINATOR_APPROVED
  COORDINATOR_REJECTED
  SUBMITTED_TO_ADMIN
  ADMIN_APPROVED
  WAITING_PARENT_APPROVAL
  PARENT_APPROVED
  CANCELLED

  @@map("proposal_statuses")
}

enum ProposalType {
  A
  B

  @@map("proposal_types")
}

enum TreatmentPeriod {
  BIMONTHLY    // 2 months
  QUARTERLY    // 3 months
  FOUR_MONTHS  // 4 months
  BIANNUAL     // 6 months
  ANNUAL       // 12 months

  @@map("treatment_periods")
}

enum AssignmentStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED

  @@map("assignment_statuses")
}

enum SessionStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  RESCHEDULED

  @@map("session_statuses")
}

enum ReportStatus {
  DRAFT
  SUBMITTED
  COORDINATOR_APPROVED
  COORDINATOR_REJECTED
  ADMIN_APPROVED
  SENT_TO_PARENT

  @@map("report_statuses")
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED

  @@map("request_statuses")
}

enum ScheduleRequestType {
  RESCHEDULE_SESSION
  RESCHEDULE_ALL
  CANCEL_SESSION
  CHANGE_THERAPIST

  @@map("schedule_request_types")
}

enum MedicalFormStatus {
  DRAFT
  IN_PROGRESS
  PENDING_REVIEW
  REVIEWED
  APPROVED
  COMPLETED
  ARCHIVED

  @@map("medical_form_statuses")
}

// ========== ADDITIONAL MODELS FOR PAYMENT & FORM MANAGEMENT ==========

model PaymentReceipt {
  id              String   @id @default(uuid())
  paymentId       String
  payment         Payment  @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  receiptNumber   String   @unique
  receiptUrl      String
  fileType        String
  fileSize        Int?
  generatedBy     String?
  generatedAt     DateTime @default(now())
  emailSent       Boolean  @default(false)
  emailSentAt     DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([paymentId])
  @@index([receiptNumber])
  @@map("payment_receipts")
}

model PaymentStatusHistory {
  id          String        @id @default(uuid())
  paymentId   String
  payment     Payment       @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  fromStatus  PaymentStatus
  toStatus    PaymentStatus
  changedBy   String?
  reason      String?
  metadata    Json?
  createdAt   DateTime      @default(now())

  @@index([paymentId])
  @@index([createdAt])
  @@map("payment_status_history")
}

model PaymentTimeout {
  id                 String    @id @default(uuid())
  paymentId          String
  payment            Payment   @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  timeoutAt          DateTime
  warningsSent       Int       @default(0)
  lastWarningAt      DateTime?
  warningAt          DateTime?
  isCancelled        Boolean   @default(false)
  cancelledAt        DateTime?
  cancelledBy        String?
  reason             String?
  cancellationReason String?
  status             String    @default("ACTIVE")
  extendedAt         DateTime?
  extensionCount     Int       @default(0)
  maxExtensions      Int       @default(3)
  notes              String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  notifications PaymentTimeoutNotification[]

  @@index([paymentId])
  @@index([timeoutAt])
  @@index([isCancelled])
  @@index([status])
  @@map("payment_timeouts")
}

model PaymentTimeoutNotification {
  id               String         @id @default(uuid())
  paymentTimeoutId String
  paymentTimeout   PaymentTimeout @relation(fields: [paymentTimeoutId], references: [id], onDelete: Cascade)
  paymentId        String?
  notificationType String
  sentTo           String
  sentAt           DateTime       @default(now())
  status           String
  errorMessage     String?
  message          String?
  createdAt        DateTime       @default(now())

  @@index([paymentTimeoutId])
  @@index([paymentId])
  @@index([sentAt])
  @@map("payment_timeout_notifications")
}

model FormProgress {
  id                   String        @id @default(uuid())
  medicalFormId        String
  medicalForm          MedicalForm   @relation(fields: [medicalFormId], references: [id], onDelete: Cascade)
  currentStep          Int           @default(1)
  completedSteps       Json          @default("[]")
  totalSteps           Int           @default(6)
  progressPercentage   Float         @default(0)
  lastSavedAt          DateTime      @default(now())
  estimatedTimeRemaining Int?
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt

  snapshots ProgressSnapshot[]

  @@index([medicalFormId])
  @@map("form_progress")
}

model ProgressSnapshot {
  id             String       @id @default(uuid())
  formProgressId String
  formProgress   FormProgress @relation(fields: [formProgressId], references: [id], onDelete: Cascade)
  step           Int
  data           Json
  completedAt    DateTime     @default(now())
  createdAt      DateTime     @default(now())

  @@index([formProgressId])
  @@index([completedAt])
  @@map("progress_snapshots")
}

model TherapistMedicalForm {
  id              String            @id @default(uuid())
  therapistId     String
  therapist       Therapist         @relation(fields: [therapistId], references: [id], onDelete: Cascade)
  patientId       String
  medicalFormId   String?
  formData        Json
  assessment      Json?
  status          MedicalFormStatus @default(DRAFT)
  submittedAt     DateTime?
  reviewedAt      DateTime?
  approvedAt      DateTime?
  completedAt     DateTime?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  @@index([therapistId])
  @@index([patientId])
  @@index([medicalFormId])
  @@index([status])
  @@map("therapist_medical_forms")
}

model PaymentPlan {
  id              String           @id @default(uuid())
  name            String
  description     String?
  planType        PaymentPlanType  @default(FULL)
  totalAmount     Decimal          @db.Decimal(10, 2)
  installments    Int              @default(1)
  frequency       String?          // "monthly", "weekly", etc.
  isActive        Boolean          @default(true)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  payments Payment[]

  @@index([planType])
  @@index([isActive])
  @@map("payment_plans")
}

model PaymentConfirmationRequest {
  id              String                      @id @default(uuid())
  paymentId       String
  requestedBy     String
  priority        String                      @default("NORMAL")
  notes           String?
  status          String                      @default("PENDING")
  reviewedBy      String?
  reviewedAt      DateTime?
  createdAt       DateTime                    @default(now())
  updatedAt       DateTime                    @updatedAt

  @@index([paymentId])
  @@index([status])
  @@index([requestedBy])
  @@map("payment_confirmation_requests")
}

model PaymentConfirmationWorkflow {
  id              String   @id @default(uuid())
  name            String
  description     String?
  steps           Json
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  workflowSteps PaymentWorkflowStep[]

  @@index([isActive])
  @@map("payment_confirmation_workflows")
}

model PaymentWorkflowStep {
  id                            String                      @id @default(uuid())
  paymentConfirmationWorkflowId String
  workflow                      PaymentConfirmationWorkflow @relation(fields: [paymentConfirmationWorkflowId], references: [id], onDelete: Cascade)
  stepNumber                    Int
  name                          String
  description                   String?
  requiredRole                  String?
  isOptional                    Boolean                     @default(false)
  createdAt                     DateTime                    @default(now())
  updatedAt                     DateTime                    @updatedAt

  @@index([paymentConfirmationWorkflowId])
  @@index([stepNumber])
  @@map("payment_workflow_steps")
}

