import { NextRequest, NextResponse } from 'next/server'
import { z } from 'zod'
import { db } from '@/lib/db'
import { PDFGenerator, ProgressReportPDF } from '@/lib/pdf-generator'

// Simplified validation schema
const pdfGenerationSchema = z.object({
  reportId: z.string().uuid('Invalid report ID'),
  reportType: z.enum(['summary', 'detailed']).optional().default('summary'),
  generatedBy: z.string().min(1, 'Generated by is required')
})

// POST /api/progress-reports/pdf - Generate progress report PDF
export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    
    // Validate request body
    const validation = pdfGenerationSchema.safeParse(body)
    if (!validation.success) {
      return NextResponse.json(
        { error: 'Invalid request data', details: validation.error.issues },
        { status: 400 }
      )
    }

    const { reportId, reportType, generatedBy } = validation.data

    // Fetch progress report
    const progressReport = await db.progressReport.findUnique({
      where: { id: reportId },
      include: {
        patient: {
          select: {
            id: true,
            firstName: true,
            lastName: true
          }
        },
        therapist: {
          select: {
            id: true,
            profile: {
              select: {
                firstName: true,
                lastName: true,
                email: true
              }
            }
          }
        },
        therapeuticPlan: {
          select: {
            id: true,
            objectives: true,
            background: true
          }
        }
      }
    })

    if (!progressReport) {
      return NextResponse.json(
        { error: 'Progress report not found' },
        { status: 404 }
      )
    }

    // Generate PDF using the PDFGenerator
    const pdf = new ProgressReportPDF(progressReport)
    
    // Get PDF as buffer
    const pdfBuffer = Buffer.from(pdf.getBuffer())

    // Return PDF file
    const filename = `progress-report-${progressReport.patient?.firstName || 'Unknown'}-${progressReport.patient?.lastName || 'Patient'}-${new Date().toISOString().split('T')[0]}.pdf`
    
    return new NextResponse(pdfBuffer, {
      status: 200,
      headers: {
        'Content-Type': 'application/pdf',
        'Content-Disposition': `attachment; filename="${filename}"`,
        'Content-Length': pdfBuffer.length.toString()
      }
    })

  } catch (error) {
    console.error('Error generating progress report PDF:', error)
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    )
  }
}